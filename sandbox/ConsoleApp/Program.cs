using System.Collections.Generic; // For IDictionary resolution
using System.Collections.Generic;
using Autoredi;
using Autoredi.Attributes;
using ConsoleApp.Autoredi;
using FooGame;
using Microsoft.Extensions.DependencyInjection;

// using Autoredi.Generated; // This is crucial to get the generated extension method

namespace ConsoleApp
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Starting Autoredi Example...");

            // 1. Create a ServiceCollection
            var services = new ServiceCollection();

            // 2. Register Autoredi services using the generated extension method
            // This method is automatically generated by your Autoredi.Generators project.
            services.AddAutorediServices();

            services.AddSingleton<Func<string, INotificationService>>(sp => key =>
                sp.GetKeyedService<INotificationService>(key));
            // 3. Build the ServiceProvider
            var serviceProvider = services.BuildServiceProvider();

            // 4. Resolve and use your services

            // Example 1: Resolve a service registered without an interface
            Console.WriteLine("\n--- Direct Concrete Registration ---");
            var config = serviceProvider.GetRequiredService<AppConfig>();
            Console.WriteLine($"Application Name: {config.AppName}");

            // Example 2: Resolve a service registered with a single interface implementation
            Console.WriteLine("\n--- Single Interface Implementation ---");
            var logger = serviceProvider.GetRequiredService<ILogger>();
            logger.Log("Application started successfully.");

            var email = serviceProvider.GetKeyedService<INotificationService>(Keys.Email);
            var sms = serviceProvider.GetKeyedService<INotificationService>(Keys.SMS);
            var allNotificationServices = serviceProvider.GetServices<INotificationService>();

            email.Send("Hello AOL!!");
            sms.Send("Hello Moto!!");
            //allNotificationServices.

            var controller = serviceProvider.GetRequiredService<Controllers.MyController>();
            controller.SayHello("Hello Controller!");

            var man = serviceProvider.GetRequiredService<Controllers.GreetingManager>();
            man.Greet(Keys.SMS, "Hello Manager!");

            var armor = serviceProvider.GetKeyedService<IRepo>(Keys.Human);
            armor.Get(50);

            var weapon = serviceProvider.GetKeyedService<IRepo>(Keys.Alien);
            weapon.Get(100);

            var myService = serviceProvider.GetRequiredService<MyService>();
            myService.DoSomething();

            var mySvc = serviceProvider.GetRequiredService<MyService2>();
            mySvc.Activate();

            //var func = serviceProvider.GetKeyedService<Func<string, INotificationService>>();

            // Example 3: Resolve aliased services using IDictionary<string, TInterface>
            /*Console.WriteLine("\n--- Aliased Interface Implementations ---");
            var notificationServices = serviceProvider.GetRequiredService<IDictionary<string, INotificationService>>();

            if (notificationServices.TryGetValue("Email", out var emailService))
            {
                emailService.Send("Welcome to Autoredi!");
            }
            else
            {
                Console.WriteLine("Email service not found!");
            }

            if (notificationServices.TryGetValue("SMS", out var smsService))
            {
                smsService.Send("Your order has been shipped.");
            }
            else
            {
                Console.WriteLine("SMS service not found!");
            }*/

            // Example of trying to resolve an unaliased INotificationService (will fail)
            // try
            // {
            //     var defaultNotificationService = serviceProvider.GetRequiredService<INotificationService>();
            // }
            // catch (Exception ex)
            // {
            //     Console.WriteLine($"\nAttempt to resolve unaliased INotificationService failed as expected: {ex.Message}");
            // }

            Console.WriteLine("\nAutoredi Example Finished.");
        }
    }

    public static class Controllers
    {
        [Autoredi]
        public class MyController
        {
            private readonly INotificationService _greeting;

            public MyController([FromKeyedServices(Keys.SMS)] INotificationService greeting)
            {
                _greeting = greeting;
            }

            // greet
            public void SayHello(string message)
            {
                _greeting.Send(message);
            }
        }

        [Autoredi]
        public class GreetingManager
        {
            private readonly Func<string, INotificationService> _resolver;

            public GreetingManager(Func<string, INotificationService> resolver)
            {
                _resolver = resolver;
            }

            public void Greet(string key, string name)
            {
                var service = _resolver(key) ?? throw new InvalidOperationException("Unsupported language.");
                service.Send(name);
            }
        }
    }

    public interface ILogger
    {
        void Log(string message);
    }

    public interface INotificationService
    {
        void Send(string message);
    }

// 1. Service without an interface
    [Autoredi(ServiceLifetime.Singleton)]
    public class AppConfig
    {
        public string AppName => "MyConsoleApp";
    }

// 2. Single implementation of an interface
    [Autoredi(ServiceLifetime.Transient, typeof(ILogger))]
    public class ConsoleLogger : ILogger
    {
        public void Log(string message)
        {
            Console.WriteLine($"[LOG]: {message}");
        }
    }

// 3. Multiple implementations of an interface, requiring aliases
    [Autoredi(ServiceLifetime.Singleton, typeof(INotificationService), Keys.Email)]
    public class EmailNotificationService : INotificationService
    {
        public void Send(string message)
        {
            Console.WriteLine($"[EMAIL]: Sending '{message}' via Email.");
        }
    }

    [Autoredi(ServiceLifetime.Singleton, typeof(INotificationService), Keys.SMS)]
    public class SmsNotificationService : INotificationService
    {
        public void Send(string message)
        {
            Console.WriteLine($"[SMS]: Sending '{message}' via SMS.");
        }
    }

    [Autoredi(ServiceLifetime.Singleton)]
    public class MyService
    {
        private readonly IRepo _repo;

        public MyService([FromKeyedServices(Keys.Human)] IRepo repo)
        {
            _repo = repo;
        }

        public void DoSomething()
        {
            _repo.Get(500);
        }
    }

    [Autoredi(ServiceLifetime.Singleton)]
    public class MyService2
    {
        private readonly IFoo _foo;

        public MyService2(IFoo foo)
        {
            _foo = foo;
        }

        public void Activate()
        {
            _foo.Activate();
        }
    }
}

// [Autoredi(serviceKey:"Mrpwel")]
// public class ValidService { }
//
// [Autoredi(ServiceLifetime.Singleton, serviceKey:"pwel")]
// public class ValidService { }

// [Autoredi((ServiceLifetime)999)] // Triggers InvalidLifetimeDescriptor
// public class InvalidLifetimeService { }
//
// [Autoredi(ServiceLifetime.Scoped, typeof(string))] // Triggers InvalidInterfaceTypeDescriptor
// public class InvalidInterfaceService { }
//
// [Autoredi(ServiceLifetime.Transient, null, 123)] // Triggers InvalidServiceKeyTypeDescriptor
// public class InvalidKeyService { }
/*[Autoredi((ServiceLifetime)999)] // Should trigger InvalidLifetimeDescriptor
public class InvalidLifetimeService { }

[Autoredi(ServiceLifetime.Singleton, typeof(string))] // Should trigger InvalidInterfaceTypeDescriptor
public class InvalidInterfaceService { }*/

// Example of a class that would trigger AUTOREDI003 (Missing Interface Implementation Error)
// [Autoredi<IDisposable>(ServiceLifetime.Transient)]
// public class MyBrokenService {}

// Example of a class that would trigger AUTOREDI002 (Alias on Non-Generic Warning)
// [Autoredi("MyAlias", ServiceLifetime.Transient)] // This would cause a warning
// public class AnotherConcreteService {}

// Example of a class that would trigger AUTOREDI004 (Multiple Attributes Error)
// [Autoredi(ServiceLifetime.Singleton)]
// [Autoredi<ILogger>(ServiceLifetime.Transient)]
// public class ServiceWithMultipleAttributes {}

// Example that would trigger AUTOREDI001 (Interface Needs Alias Warning)
// If you added this:
// [Autoredi<INotificationService>(ServiceLifetime.Transient)]
// public class DefaultNotificationService : INotificationService
// {
//     public void Send(string message) { Console.WriteLine("Default notification."); }
// }
// ... then EmailNotificationService, SmsNotificationService, AND DefaultNotificationService
// would all get AUTOREDI001 warnings because INotificationService has multiple implementations
// and DefaultNotificationService is missing an alias.
/*[Autoredi(ServiceLifetime.Singleton)]
public class NotificationController(
    [FromKeyedServices("email")] INotificationService emailService,
    [FromKeyedServices("sms")] INotificationService smsService)
{
    public void SendEmail()
    {
        emailService.Send("Hello via Email!");
    }

    public void SendSms()
    {
        smsService.Send("Hello via SMS!");
    }
}*/
